<?php

namespace AcademicPuma\OAuth;


class OAuthAdapterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var $adapter can be used throughout the whole test fixture
     */
    private $adapter;

    /**
     * Test automatic removal/addition of a trailing slash in the base URL.
     */
    public function testAddTrailingSlash()
    {
        $slashAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de/'
        ));

        $this->assertEquals($slashAdapter->getClient()->getBaseUrl(), 'http://puma.uni-kassel.de/');

        $noSlashAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de'
        ));

        $this->assertEquals($noSlashAdapter->getClient()->getBaseUrl(), 'http://puma.uni-kassel.de/');
    }

    /**
     * Test custom authorize url.
     */
    public function testCustomAuthorizeUrl() {

        $customAuthURLAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de/', 'authUrl' => 'autoRegisterSamlAndOAuth'
        ));

        $this->assertEquals('autoRegisterSamlAndOAuth', $customAuthURLAdapter->authorizeURL);

        $defaultAuthURLAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de/'
        ));

        $this->assertEquals('oauth/authorize', $defaultAuthURLAdapter->authorizeURL);

        $wrongAuthURLAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de/', 'authUrl' => '/autoRegisterSamlAndOAuth'
        ));

        $this->assertEquals('autoRegisterSamlAndOAuth', $wrongAuthURLAdapter->authorizeURL);

        $wrongAuthURLAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de/', 'authUrl' => 'autoRegisterSamlAndOAuth/'
        ));

        $this->assertEquals('autoRegisterSamlAndOAuth', $wrongAuthURLAdapter->authorizeURL);

        $wrongAuthURLAdapter = new OAuthAdapter(array('consumerKey' => '', 'consumerSecret' => '', 'callbackUrl' => '',
            'baseUrl' => 'http://puma.uni-kassel.de/', 'authUrl' => '/autoRegisterSamlAndOAuth/'
        ));

        $this->assertEquals('autoRegisterSamlAndOAuth', $wrongAuthURLAdapter->authorizeURL);
    }

    /**
     * Example
     */
    protected function setUp()
    {
        $this->adapter = new OAuthAdapter(array(
            'consumerKey' => 'php-restclient-boettger-test',
            'consumerSecret' => 'ryrDlXlThG0aq4jfKKZR6DD0kAtgWyUryrDlXlThG0aq4jfKKZR6DD0kAtgWyU',
            'callbackUrl' => 'oauth_callback_example.php',
            'baseUrl' => 'http://puma.uni-kassel.de'
        ));
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
